services:
  api:
    container_name: evolution_api
    image: evoapicloud/evolution-api:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - evolution_instances:/evolution/instances
    env_file:
      - .env
    environment:
      # Redis externo creado en el proyecto "triexpert"
      REDIS_HOST: triexpert_redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "evolution"
      # útil si tu imagen acepta URI:
      REDIS_URI: "redis://default:evolution@triexpert_redis:6379"
    expose:
      - "8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - evolution-net
      - triexpert_default   # red del proyecto donde está tu Redis

  postgres:
    container_name: postgres
    image: postgres:15
    command: ["postgres", "-c", "max_connections=200", "-c", "listen_addresses=*"]
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: evolution
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d evolution -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - evolution-net
      - triexpert_default   # opcional, pero ayuda si alguna vez quieres verlo desde otra app

volumes:
  evolution_instances:
  postgres_data:

networks:
  evolution-net:
    name: evolution-net
    driver: bridge
  triexpert_default:
    external: true
